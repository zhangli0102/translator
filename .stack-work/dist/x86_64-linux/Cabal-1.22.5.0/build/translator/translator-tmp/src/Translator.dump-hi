
==================== FINAL INTERFACE ====================
2016-07-04 00:03:00.768904 UTC

interface main@main:Translator 7103
  interface hash: e86b1b1c52e1249375e60c55fffc0099
  ABI hash: 152458c45ca5db5756737d7da842a44f
  export-list hash: 1007b96d65a4eaad40b5bbb4efd21ace
  orphan hash: 011ca624f9ada0ac203545d83a9815ca
  flag hash: f6c6f4fd25ff6dfaa7a16e675409e1e9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Translator.chToEng
  Translator.chineseToEnglish
  Translator.engToCh
  Translator.englishToChinese
  Translator.Chinese
  Translator.English
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map 1800ccac43fd924c376b60eac12f4d04
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
13f62a03b0e9285b5a9705b836fbe989
  $sfromList ::
    [(Translator.English, a)] -> Data.Map.Base.Map Translator.English a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(Translator.English, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Translator.English @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ Translator.English
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ Translator.English @ a)
                             (Data.Map.Base.Tip @ Translator.English @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Translator.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Translator.English
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ Translator.English @ a)
                                     (Data.Map.Base.Tip @ Translator.English @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Translator.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ Translator.English
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ Translator.English @ a)
                                     (Data.Map.Base.Tip @ Translator.English @ a))
                                  wild2 } } } } } }) -}
000bbb78cefa3b15daa0a68aa6cc68f4
  $sfromList1 ::
    Data.Map.Base.Map Translator.English a1
    -> [(Translator.English, a1)]
    -> Data.Map.Base.Map Translator.English a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
4bf49bb219d3094ffde19d0291af3b0f
  $sinsert_$sgo10 ::
    Translator.English
    -> a1
    -> Data.Map.Base.Map Translator.English a1
    -> Data.Map.Base.Map Translator.English a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
b7b636b099d9e89b24c75310d9db620c
  $slookup1 ::
    Translator.Chinese
    -> Data.Map.Base.Map Translator.Chinese a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f9c46b7cbb612aa670e6c84eff3a4673
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Translator.English a
    -> [(Translator.English, a)]
    -> Data.Map.Base.Map Translator.English a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
8678e8b07f327d531d0d260c81ee40f4
  type Chinese = GHC.Base.String
a67d88338882234a82f4f30c72955411
  type English = GHC.Base.String
98aa1ba737ab942b7cbfa9f3df5c6ef4
  chToEng :: Translator.Chinese -> GHC.Base.Maybe Translator.English
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ c :: Translator.Chinese ->
                 Translator.$slookup1
                   @ [GHC.Types.Char]
                   c
                   Translator.chineseToEnglish) -}
81b4da9dd96623b5cb0fba856e9aa983
  chineseToEnglish ::
    Data.Map.Base.Map Translator.Chinese Translator.English
  {- Unfolding: (Translator.chineseToEnglish_go10
                   (Data.Map.Base.Tip @ Translator.Chinese @ Translator.English)
                   Translator.englishToChinese) -}
83e5c442f1a447eb4da3a69d47adaebc
  chineseToEnglish_go10 ::
    Data.Map.Base.Map Translator.Chinese Translator.English
    -> Data.Map.Base.Map Translator.English Translator.Chinese
    -> Data.Map.Base.Map Translator.Chinese Translator.English
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d29b158903ee3ef898dc89ca7361497b
  engToCh :: Translator.English -> GHC.Base.Maybe Translator.Chinese
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Translator.English ->
                 Translator.$slookup1
                   @ [GHC.Types.Char]
                   e
                   Translator.englishToChinese) -}
c6f1319dc95374197dffd79a1bf2a914
  englishToChinese ::
    Data.Map.Base.Map Translator.English Translator.Chinese
  {- Unfolding: (Translator.$sfromList
                   @ [GHC.Types.Char]
                   Translator.englishToChinese1) -}
6b1d35df151c9c5e9309fef6caadf805
  englishToChinese1 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese34
                   Translator.englishToChinese2) -}
e71b365bf4eb9e0d383851de7b896c1b
  englishToChinese10 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese12,
                  Translator.englishToChinese11)) -}
b581ee637d6e54b25a12f9918504ecaf
  englishToChinese11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\135\\189\\230\\149\\176\\229\\188\\143\\231\\188\\150\\231\\168\\139"#) -}
af988064ddf90c19c774133e2fa37a5e
  englishToChinese12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Functional Programming"#) -}
ca7901ad18bdf45f2269486b6af9f6a0
  englishToChinese13 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese15,
                  Translator.englishToChinese14)) -}
1c1b6c0c5f03f47e01aff6020818660b
  englishToChinese14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\165\\189\\229\\144\\131"#) -}
62a9fe6c12e15a64ef9e447876dc59fd
  englishToChinese15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "delicious"#) -}
263259312ed3b008be5a5be45429056a
  englishToChinese16 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese18,
                  Translator.englishToChinese17)) -}
82521078fecfec2977aad7832ab44968
  englishToChinese17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\229\\164\\169\\231\\156\\159\\231\\131\\166"#) -}
664abcbd5cab85be6d98cbb1b4680444
  englishToChinese18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "What a day"#) -}
c2375aa2e0204e363b6bc754a7b5a32c
  englishToChinese19 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese21,
                  Translator.englishToChinese20)) -}
f45ae949ba9abe469a9990c04f98f4b1
  englishToChinese2 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese31
                   Translator.englishToChinese3) -}
4fa3d3898ef9c59084c7caa00344f6f7
  englishToChinese20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\142\\187\\228\\187\\150\\229\\166\\136\\231\\154\\132"#) -}
ee8813e40e39347f43ee66a18a2e6489
  englishToChinese21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "What the hell"#) -}
be9a6bd152b665901d3a744573057493
  englishToChinese22 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese24,
                  Translator.englishToChinese23)) -}
cf667e74949b453f7680577f3d1e91ed
  englishToChinese23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\188\\160\\231\\171\\139"#) -}
76190f73ce37880518ffee1b52704018
  englishToChinese24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Li Zhang"#) -}
baae240019fb1eefc921bb3f9d2a6c55
  englishToChinese25 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese27,
                  Translator.englishToChinese26)) -}
6c812dea2ae47475425e830e5f22af0c
  englishToChinese26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\190\\136\\229\\165\\189"#) -}
b30fc02eb3c409894dbfbc5dc717a16c
  englishToChinese27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pretty good"#) -}
ea93eeba3249a27b2b317a230d160602
  englishToChinese28 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese30,
                  Translator.englishToChinese29)) -}
6bd2c04fad8cdf302371ec6da8fa1d47
  englishToChinese29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\189\\160\\229\\165\\189\\229\\144\\151"#) -}
1f04c5f70414efffcbd2d887a4a01127
  englishToChinese3 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese28
                   Translator.englishToChinese4) -}
f97e927e21f37b112c0f9e222d65ffc1
  englishToChinese30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "how are you"#) -}
327279b4a66556dbb1e4f805c40072af
  englishToChinese31 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese33,
                  Translator.englishToChinese32)) -}
855179f26f3763bb60dd0142e830941f
  englishToChinese32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\134\\141\\232\\167\\129"#) -}
46f503b9a52e76b44c1ab3383ea9176e
  englishToChinese33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bye"#) -}
1427f480829ab66de8358ae9523ebaf9
  englishToChinese34 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: ((Translator.englishToChinese36,
                  Translator.englishToChinese35)) -}
07a69e3e7ad57041928f5bc9795d5fa8
  englishToChinese35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\189\\160\\229\\165\\189"#) -}
381a5be5544da5128cf960dc88e24a60
  englishToChinese36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello"#) -}
21fff74345a3fd06c739413da58132ff
  englishToChinese4 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese25
                   Translator.englishToChinese5) -}
a545aaf7dbe9f1d9c5302e8984d885da
  englishToChinese5 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese22
                   Translator.englishToChinese6) -}
86732b5346ba6412c2dd6cd78e444823
  englishToChinese6 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese19
                   Translator.englishToChinese7) -}
8eb1f8fe08a5fd6f1b6d614a374c9810
  englishToChinese7 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese16
                   Translator.englishToChinese8) -}
3908c3b47494c4f656825741d7311a1c
  englishToChinese8 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese13
                   Translator.englishToChinese9) -}
b34884fc4488cb428ed05cb6752336d7
  englishToChinese9 :: [(Translator.English, Translator.Chinese)]
  {- Unfolding: (GHC.Types.:
                   @ (Translator.English, Translator.Chinese)
                   Translator.englishToChinese10
                   (GHC.Types.[] @ (Translator.English, Translator.Chinese))) -}
"SPEC/Translator fromList @ English _" [ALWAYS] forall @ a
                                                       $dOrd :: GHC.Classes.Ord Translator.English
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = Translator.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

